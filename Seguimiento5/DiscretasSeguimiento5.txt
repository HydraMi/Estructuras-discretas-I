Seguimiento 5 de Computación y estructuras discretas 
Por: Miguel Pérez Ojeda
Código: A00407054

Estrategia utilizada para resolver el problema :

En el metodo lo que realize fue convertir cada lista en una pila usando el push, como paar simular que los cilindros se pueden quitar solo desde arriba, como si fueran torres de bloques.
Luego sume cuanto media cada una, por ejemplo si una pila era [3, 2, 1, 1, 1] su altura total era 8. Despues mientras las tres alturas no fueran iguales, iba quitando el cilindro de arriba de la pila con pop la cual tuviera mas altura. Por ejemplo si una pila media 10, otra 8 y otra 7, quitaba uno de la que tenia 10, y asi hasta que todas quedaran igual. Si se logra que queden iguales devuelvo esa altura, si no pues devuelvo 0.


Codigo: 

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'equalStacks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY h1
     *  2. INTEGER_ARRAY h2
     *  3. INTEGER_ARRAY h3
     */

    public static int equalStacks(List<Integer> h1, List<Integer> h2, List<Integer> h3) {
        List<Integer> lista1 = h1;
        List<Integer> lista2 = h2;
        List<Integer> lista3 = h3;
        Stack<Integer> stack1 = new Stack<>();
        Stack<Integer> stack2 = new Stack<>();
        Stack<Integer> stack3 = new Stack<>();
        
        for (int i = h3.size() - 1; i >= 0; i--) {
            stack3.push(lista3.get(i));
        }
        for (int i = h2.size() - 1; i >= 0; i--) {
            stack2.push(lista2.get(i));
        }
        
        for (int i = h1.size() - 1; i >= 0; i--) {
            stack1.push(lista1.get(i));
        }
        int suma1 = 0;
        for (int num : stack1) {
        suma1 += num;
        }

        int suma2 = 0;
        for (int num : stack2) {
            suma2 += num;
        }
        int suma3 = 0;
        for (int num : stack3) {
            suma3 += num;
        }
        while (!stack1.isEmpty() && !stack2.isEmpty() && !stack3.isEmpty()) {
            if (suma1 == suma2 && suma2 == suma3) {
                return suma1;
            }
            if (suma1 >= suma2 && suma1 >= suma3) {
                suma1 -= stack1.pop();
            } else if (suma2 >= suma1 && suma2 >= suma3) {
                suma2 -= stack2.pop();
            } else {
                suma3 -= stack3.pop();
            }
        }
        return 0;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n1 = Integer.parseInt(firstMultipleInput[0]);

        int n2 = Integer.parseInt(firstMultipleInput[1]);

        int n3 = Integer.parseInt(firstMultipleInput[2]);

        List<Integer> h1 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h2 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> h3 = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
